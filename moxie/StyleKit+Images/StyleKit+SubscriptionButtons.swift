//
//  UpgradeButtons120218.swift
//  Pupster
//
//  Created by MattSaucedo on 12/2/18.
//  Copyright Â© 2018 Pupster. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

extension StyleKit {
    
    //// Drawing Methods
    
    class func draw_1MonthSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let strokeColor = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let properColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        properColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor.setFill()
        bezier3Path.fill()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 13, width: 15.5, height: 31)
        let labelTextContent = "1"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 33.28, y: 19, width: 77.72, height: 23)
        let label2TextContent = "MONTH"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 15)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 44, width: 173, height: 20)
        let label3TextContent = "$12.99 PER MONTH"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 14)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    class func draw_6monthnotselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let properColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        properColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 17, y: 13, width: 19, height: 31)
        let labelTextContent = "6"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 35.78, y: 19, width: 90.22, height: 23)
        let label2TextContent = "MONTHS"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 17, y: 44, width: 52, height: 20)
        let label3TextContent = "$59.99"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 68.66, y: 49, width: 63.34, height: 14)
        let label4TextContent = "($9.99/mo)"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 9)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 178, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 20))
        clip2Path.addLine(to: CGPoint(x: 188, y: 20))
        clip2Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip2Path.addLine(to: CGPoint(x: 178, y: 0))
        clip2Path.close()
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 178, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier3Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 178, y: 0))
        clip3Path.addLine(to: CGPoint(x: 317, y: 0))
        clip3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip3Path.addLine(to: CGPoint(x: 327, y: 20))
        clip3Path.addLine(to: CGPoint(x: 188, y: 20))
        clip3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip3Path.addLine(to: CGPoint(x: 178, y: 0))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 178, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier5Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier5Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier5Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier5Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier5Path.close()
        strokeColor2.setStroke()
        bezier5Path.lineWidth = 4
        bezier5Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label 5 Drawing
        let label5Rect = CGRect(x: 222, y: 1, width: 72, height: 18)
        let label5TextContent = "SAVE 23%"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 12)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label5Style,
            ] as [NSAttributedStringKey: Any]
        
        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    class func draw_12MonthsNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let properColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -1, width: 327, height: 84))
        properColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor3.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 178, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 20))
        clip2Path.addLine(to: CGPoint(x: 188, y: 20))
        clip2Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip2Path.addLine(to: CGPoint(x: 178, y: 0))
        clip2Path.close()
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 178, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier3Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier3Path.close()
        fillColor3.setFill()
        bezier3Path.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 178, y: 0))
        clip3Path.addLine(to: CGPoint(x: 317, y: 0))
        clip3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip3Path.addLine(to: CGPoint(x: 327, y: 20))
        clip3Path.addLine(to: CGPoint(x: 188, y: 20))
        clip3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip3Path.addLine(to: CGPoint(x: 178, y: 0))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 178, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier5Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier5Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier5Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier5Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier5Path.close()
        strokeColor3.setStroke()
        bezier5Path.lineWidth = 4
        bezier5Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 13, width: 29, height: 31)
        let labelTextContent = "12"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 46.71, y: 19, width: 70.29, height: 23)
        let label2TextContent = "MONTHS"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 44, width: 51, height: 20)
        let label3TextContent = "$95.99"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 68.53, y: 49, width: 61.47, height: 14)
        let label4TextContent = "($7.99/mo)"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 9)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()
        
        
        //// Label 5 Drawing
        let label5Rect = CGRect(x: 221, y: 1, width: 78, height: 18)
        let label5TextContent = "SAVE 38%"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 12)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label5Style,
            ] as [NSAttributedStringKey: Any]
        
        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    class func draw_1MonthNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let strokeColor = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let properColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        properColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 13, width: 15, height: 31)
        let labelTextContent = "1"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 33.28, y: 19, width: 82.72, height: 23)
        let label2TextContent = "MONTH"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 44, width: 149, height: 20)
        let label3TextContent = "$12.99 PER MONTH"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    class func draw_6monthSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let color = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let properColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        properColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor2.setFill()
        bezierPath.fill()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 17, y: 13, width: 19, height: 31)
        let labelTextContent = "6"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 35.78, y: 19, width: 75.22, height: 23)
        let label2TextContent = "MONTHS"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 15)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 17, y: 44, width: 52, height: 20)
        let label3TextContent = "$59.99"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 14)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 68.66, y: 49, width: 59.34, height: 14)
        let label4TextContent = "($9.99/mo)"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 178, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 20))
        clip2Path.addLine(to: CGPoint(x: 188, y: 20))
        clip2Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip2Path.addLine(to: CGPoint(x: 178, y: 0))
        clip2Path.close()
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 178, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier3Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 178, y: 0))
        clip3Path.addLine(to: CGPoint(x: 317, y: 0))
        clip3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip3Path.addLine(to: CGPoint(x: 327, y: 20))
        clip3Path.addLine(to: CGPoint(x: 188, y: 20))
        clip3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip3Path.addLine(to: CGPoint(x: 178, y: 0))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 178, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier5Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier5Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier5Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier5Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier5Path.close()
        color.setFill()
        bezier5Path.fill()
        strokeColor2.setStroke()
        bezier5Path.lineWidth = 4
        bezier5Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label 5 Drawing
        let label5Rect = CGRect(x: 222, y: 1, width: 71, height: 18)
        let label5TextContent = "SAVE 23%"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 12)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label5Style,
            ] as [NSAttributedStringKey: Any]
        
        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    class func draw_12MonthsSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        let properColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        properColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor3.setFill()
        bezierPath.fill()
        strokeColor3.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 178, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 20))
        clip2Path.addLine(to: CGPoint(x: 188, y: 20))
        clip2Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip2Path.addLine(to: CGPoint(x: 178, y: 0))
        clip2Path.close()
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 178, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier3Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier3Path.close()
        fillColor3.setFill()
        bezier3Path.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 178, y: 0))
        clip3Path.addLine(to: CGPoint(x: 317, y: 0))
        clip3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip3Path.addLine(to: CGPoint(x: 327, y: 20))
        clip3Path.addLine(to: CGPoint(x: 188, y: 20))
        clip3Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        clip3Path.addLine(to: CGPoint(x: 178, y: 0))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 178, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier5Path.addLine(to: CGPoint(x: 327, y: 20))
        bezier5Path.addLine(to: CGPoint(x: 188, y: 20))
        bezier5Path.addCurve(to: CGPoint(x: 178, y: 10), controlPoint1: CGPoint(x: 182.48, y: 20), controlPoint2: CGPoint(x: 178, y: 15.52))
        bezier5Path.addLine(to: CGPoint(x: 178, y: 0))
        bezier5Path.close()
        fillColor2.setFill()
        bezier5Path.fill()
        strokeColor3.setStroke()
        bezier5Path.lineWidth = 4
        bezier5Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 13, width: 29, height: 31)
        let labelTextContent = "12"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 46.71, y: 19, width: 70.29, height: 23)
        let label2TextContent = "MONTHS"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 15)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 44, width: 51, height: 20)
        let label3TextContent = "$95.99"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 68.53, y: 49, width: 56.47, height: 14)
        let label4TextContent = "($7.99/mo)"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()
        
        
        //// Label 5 Drawing
        let label5Rect = CGRect(x: 221, y: 1, width: 73, height: 18)
        let label5TextContent = "SAVE 38%"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 12)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label5Style,
            ] as [NSAttributedStringKey: Any]
        
        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    
    
    
}
