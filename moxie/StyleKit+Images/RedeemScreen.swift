//
//  RedeemScreen.swift
//  Pupster2.0
//
//  Created by MattSaucedo on 9/11/18.
//  Copyright © 2018 Pupster. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

extension StyleKit {

    //// Drawing Methods

    class func drawRedeemScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 442), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 442), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 442)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Label Drawing
        let labelRect = CGRect(x: 21, y: 0, width: 265, height: 49)
        let labelTextContent = "You’ve earned a"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Semibold", size: 34)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 21, y: 41, width: 139, height: 49)
        let label2TextContent = "reward!"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Semibold", size: 34)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        //// Clip Drawing
        
        
        //// Label 5 Drawing
        let label5Rect = CGRect(x: 21, y: 101, width: 220.62, height: 58)
        let label5TextContent = "Feed a dog in need through\nour adoption program partners"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 17)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label5Style,
            ] as [NSAttributedStringKey: Any]
        
        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()
        
        
        //// Label 8 Drawing
        let label8Rect = CGRect(x: 177, y: 299, width: 172.56, height: 62)
        let label8TextContent = "5% off your next purchase on Pupster."
        let label8Style = NSMutableParagraphStyle()
        label8Style.alignment = .right
        let label8FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 17)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label8Style,
            ] as [NSAttributedStringKey: Any]
        
        let label8TextHeight: CGFloat = label8TextContent.boundingRect(with: CGSize(width: label8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label8Rect)
        label8TextContent.draw(in: CGRect(x: label8Rect.minX, y: label8Rect.minY + (label8Rect.height - label8TextHeight) / 2, width: label8Rect.width, height: label8TextHeight), withAttributes: label8FontAttributes)
        context.restoreGState()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.5, y: 278.25))
        bezier3Path.addLine(to: CGPoint(x: 347.5, y: 278.25))
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()
        
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 23, y: 289, width: 82, height: 82))
        strokeColor2.setStroke()
        ovalPath.lineWidth = 6
        ovalPath.stroke()
        
        
        //// Label 10 Drawing
        let label10Rect = CGRect(x: 43.5, y: 296, width: 33, height: 71)
        let label10TextContent = "5"
        let label10Style = NSMutableParagraphStyle()
        label10Style.alignment = .center
        let label10FontAttributes = [
            .font: UIFont(name: "SFProText-Heavy", size: 48)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label10Style,
            ] as [NSAttributedStringKey: Any]
        
        let label10TextHeight: CGFloat = label10TextContent.boundingRect(with: CGSize(width: label10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label10Rect)
        label10TextContent.draw(in: CGRect(x: label10Rect.minX, y: label10Rect.minY + (label10Rect.height - label10TextHeight) / 2, width: label10Rect.width, height: label10TextHeight), withAttributes: label10FontAttributes)
        context.restoreGState()
        
        
        //// Label 11 Drawing
        let label11Rect = CGRect(x: 73.6, y: 313, width: 12.8, height: 23)
        let label11TextContent = "%"
        let label11Style = NSMutableParagraphStyle()
        label11Style.alignment = .center
        let label11FontAttributes = [
            .font: UIFont(name: "SFProText-Heavy", size: 15)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label11Style,
            ] as [NSAttributedStringKey: Any]
        
        let label11TextHeight: CGFloat = label11TextContent.boundingRect(with: CGSize(width: label11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label11Rect)
        label11TextContent.draw(in: CGRect(x: label11Rect.minX, y: label11Rect.minY + (label11Rect.height - label11TextHeight) / 2, width: label11Rect.width, height: label11TextHeight), withAttributes: label11FontAttributes)
        context.restoreGState()
        
        
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 268, y: 96, width: 82, height: 82))
        strokeColor2.setStroke()
        oval2Path.lineWidth = 6
        oval2Path.stroke()
        
        
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 331.93, y: 157.63))
        bezier4Path.addLine(to: CGPoint(x: 323.93, y: 137.63))
        bezier4Path.addCurve(to: CGPoint(x: 323, y: 137), controlPoint1: CGPoint(x: 323.78, y: 137.25), controlPoint2: CGPoint(x: 323.41, y: 137))
        bezier4Path.addLine(to: CGPoint(x: 295, y: 137))
        bezier4Path.addCurve(to: CGPoint(x: 294.07, y: 137.63), controlPoint1: CGPoint(x: 294.59, y: 137), controlPoint2: CGPoint(x: 294.22, y: 137.25))
        bezier4Path.addLine(to: CGPoint(x: 286.07, y: 157.63))
        bezier4Path.addCurve(to: CGPoint(x: 286.17, y: 158.56), controlPoint1: CGPoint(x: 285.95, y: 157.94), controlPoint2: CGPoint(x: 285.99, y: 158.29))
        bezier4Path.addCurve(to: CGPoint(x: 287, y: 159), controlPoint1: CGPoint(x: 286.36, y: 158.83), controlPoint2: CGPoint(x: 286.67, y: 159))
        bezier4Path.addLine(to: CGPoint(x: 331, y: 159))
        bezier4Path.addCurve(to: CGPoint(x: 331.83, y: 158.56), controlPoint1: CGPoint(x: 331.33, y: 159), controlPoint2: CGPoint(x: 331.64, y: 158.83))
        bezier4Path.addCurve(to: CGPoint(x: 331.93, y: 157.63), controlPoint1: CGPoint(x: 332.01, y: 158.29), controlPoint2: CGPoint(x: 332.05, y: 157.94))
        bezier4Path.close()
        fillColor.setFill()
        bezier4Path.fill()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 313.65, y: 126.21))
        bezier5Path.addLine(to: CGPoint(x: 308.62, y: 135))
        bezier5Path.addLine(to: CGPoint(x: 318.39, y: 135))
        bezier5Path.addLine(to: CGPoint(x: 321.02, y: 130.42))
        bezier5Path.addCurve(to: CGPoint(x: 325.57, y: 131.01), controlPoint1: CGPoint(x: 322.35, y: 131.19), controlPoint2: CGPoint(x: 323.97, y: 131.44))
        bezier5Path.addCurve(to: CGPoint(x: 329.79, y: 123.64), controlPoint1: CGPoint(x: 328.77, y: 130.14), controlPoint2: CGPoint(x: 330.66, y: 126.84))
        bezier5Path.addCurve(to: CGPoint(x: 322.42, y: 119.43), controlPoint1: CGPoint(x: 328.92, y: 120.45), controlPoint2: CGPoint(x: 325.62, y: 118.56))
        bezier5Path.addCurve(to: CGPoint(x: 315.06, y: 115.21), controlPoint1: CGPoint(x: 321.56, y: 116.23), controlPoint2: CGPoint(x: 318.26, y: 114.34))
        bezier5Path.addCurve(to: CGPoint(x: 310.84, y: 122.58), controlPoint1: CGPoint(x: 311.86, y: 116.08), controlPoint2: CGPoint(x: 309.98, y: 119.38))
        bezier5Path.addCurve(to: CGPoint(x: 313.65, y: 126.21), controlPoint1: CGPoint(x: 311.28, y: 124.17), controlPoint2: CGPoint(x: 312.32, y: 125.45))
        bezier5Path.close()
        fillColor.setFill()
        bezier5Path.fill()
        
        
        //// Clip 2 Drawing
        
        context.restoreGState()
        
    }
    
    
    class func drawConciergeDetails(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 360, height: 230), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 360, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 360, y: resizedFrame.height / 230)
        
        
        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        let strokeColor = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        
        //// Image Declarations
        let image = UIImage(named: "gwenForStyleKit")!
        
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 370, height: 240))
        fillColor2.setFill()
        rectangle2Path.fill()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 44, y: 154, width: 266, height: 32)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        "Here to help you and your dog".draw(in: labelRect, withAttributes: labelFontAttributes)
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 44, y: 176, width: 283, height: 36)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "get the most out of life together.".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 16, y: 16)
        context.scaleBy(x: 0.5, y: 0.5)
        
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 154, height: 154))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -image.size.height)
        context.draw(image.cgImage!, in: CGRect(x: 0, y: 0, width: image.size.width, height: image.size.height))
        context.restoreGState()
        
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 106, y: 30, width: 101, height: 50)
        let label3TextContent = "Gwen"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Semibold", size: 28)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 44, y: 119, width: 247, height: 35)
        let label4TextContent = "Pupster Certified Expert"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.5, y: 165.5))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 165.5))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 171.5))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 171.5))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 164.75))
        bezierPath.addCurve(to: CGPoint(x: 19.87, y: 158.68), controlPoint1: CGPoint(x: 16.5, y: 161.58), controlPoint2: CGPoint(x: 17.68, y: 159.59))
        strokeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 25.5, y: 165.5))
        bezier2Path.addLine(to: CGPoint(x: 31.5, y: 165.5))
        bezier2Path.addLine(to: CGPoint(x: 31.5, y: 171.5))
        bezier2Path.addLine(to: CGPoint(x: 25.5, y: 171.5))
        bezier2Path.addLine(to: CGPoint(x: 25.5, y: 164.75))
        bezier2Path.addCurve(to: CGPoint(x: 28.87, y: 158.68), controlPoint1: CGPoint(x: 25.5, y: 161.58), controlPoint2: CGPoint(x: 26.68, y: 159.59))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.5, y: 130.5))
        bezier3Path.addLine(to: CGPoint(x: 21.5, y: 127.5))
        bezier3Path.addLine(to: CGPoint(x: 26.5, y: 127.5))
        bezier3Path.addLine(to: CGPoint(x: 26.5, y: 130.5))
        strokeColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()
        
        
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 22.5, y: 136.5))
        bezier4Path.addLine(to: CGPoint(x: 16.5, y: 136.5))
        bezier4Path.addLine(to: CGPoint(x: 16.5, y: 131.5))
        bezier4Path.addCurve(to: CGPoint(x: 17.5, y: 130.5), controlPoint1: CGPoint(x: 16.5, y: 130.95), controlPoint2: CGPoint(x: 16.95, y: 130.5))
        bezier4Path.addLine(to: CGPoint(x: 30.5, y: 130.5))
        bezier4Path.addCurve(to: CGPoint(x: 31.5, y: 131.5), controlPoint1: CGPoint(x: 31.05, y: 130.5), controlPoint2: CGPoint(x: 31.5, y: 130.95))
        bezier4Path.addLine(to: CGPoint(x: 31.5, y: 136.5))
        bezier4Path.addLine(to: CGPoint(x: 25.5, y: 136.5))
        strokeColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 30.5, y: 138.5))
        bezier5Path.addLine(to: CGPoint(x: 30.5, y: 140.5))
        bezier5Path.addCurve(to: CGPoint(x: 29.5, y: 141.5), controlPoint1: CGPoint(x: 30.5, y: 141.05), controlPoint2: CGPoint(x: 30.05, y: 141.5))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 141.5))
        bezier5Path.addCurve(to: CGPoint(x: 17.5, y: 140.5), controlPoint1: CGPoint(x: 17.95, y: 141.5), controlPoint2: CGPoint(x: 17.5, y: 141.05))
        bezier5Path.addLine(to: CGPoint(x: 17.5, y: 138.5))
        strokeColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()
        
        
        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 22.5, y: 134.5, width: 3, height: 4))
        strokeColor.setStroke()
        rectangle8Path.lineWidth = 1
        rectangle8Path.stroke()
        
        context.restoreGState()
        
    }

    class func drawBillTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 360, height: 230), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 360, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 360, y: resizedFrame.height / 230)
        
        
        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.847, green: 0.847, blue: 0.847, alpha: 0.522)
        let strokeColor = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        
        //// Image Declarations
        let image = UIImage(named: "bill")!
        
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 370, height: 240))
        fillColor2.setFill()
        rectangle2Path.fill()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 44, y: 154, width: 275, height: 29)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        "Here to help you learn more".draw(in: labelRect, withAttributes: labelFontAttributes)
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 44, y: 176, width: 196, height: 33)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "about Pupster.".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath(ovalIn: CGRect(x: 16, y: 16, width: 77, height: 77))
        clip2Path.addClip()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: 16, y: 16, width: 78, height: 78))
        clipPath.addClip()
        
        
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 11, y: 11, width: 87, height: 87))
        fillColor3.setFill()
        rectangle5Path.fill()
        
        
        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: -9, y: 16)
        context.scaleBy(x: 0.13, y: 0.13)
        
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 960, height: 959))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -image.size.height)
        context.draw(image.cgImage!, in: CGRect(x: 0, y: 0, width: image.size.width, height: image.size.height))
        context.restoreGState()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 106, y: 30, width: 36.7, height: 42)
        let label3TextContent = "Bill"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [
            .font: UIFont(name: "SFProDisplay-Semibold", size: 28)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 44, y: 119, width: 275, height: 35)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Medium", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        "Pupster Customer Support".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.5, y: 165.5))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 165.5))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 171.5))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 171.5))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 164.75))
        bezierPath.addCurve(to: CGPoint(x: 19.87, y: 158.68), controlPoint1: CGPoint(x: 16.5, y: 161.58), controlPoint2: CGPoint(x: 17.68, y: 159.59))
        strokeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 25.5, y: 165.5))
        bezier2Path.addLine(to: CGPoint(x: 31.5, y: 165.5))
        bezier2Path.addLine(to: CGPoint(x: 31.5, y: 171.5))
        bezier2Path.addLine(to: CGPoint(x: 25.5, y: 171.5))
        bezier2Path.addLine(to: CGPoint(x: 25.5, y: 164.75))
        bezier2Path.addCurve(to: CGPoint(x: 28.87, y: 158.68), controlPoint1: CGPoint(x: 25.5, y: 161.58), controlPoint2: CGPoint(x: 26.68, y: 159.59))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.5, y: 130.5))
        bezier3Path.addLine(to: CGPoint(x: 21.5, y: 127.5))
        bezier3Path.addLine(to: CGPoint(x: 26.5, y: 127.5))
        bezier3Path.addLine(to: CGPoint(x: 26.5, y: 130.5))
        strokeColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()
        
        
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 22.5, y: 136.5))
        bezier4Path.addLine(to: CGPoint(x: 16.5, y: 136.5))
        bezier4Path.addLine(to: CGPoint(x: 16.5, y: 131.5))
        bezier4Path.addCurve(to: CGPoint(x: 17.5, y: 130.5), controlPoint1: CGPoint(x: 16.5, y: 130.95), controlPoint2: CGPoint(x: 16.95, y: 130.5))
        bezier4Path.addLine(to: CGPoint(x: 30.5, y: 130.5))
        bezier4Path.addCurve(to: CGPoint(x: 31.5, y: 131.5), controlPoint1: CGPoint(x: 31.05, y: 130.5), controlPoint2: CGPoint(x: 31.5, y: 130.95))
        bezier4Path.addLine(to: CGPoint(x: 31.5, y: 136.5))
        bezier4Path.addLine(to: CGPoint(x: 25.5, y: 136.5))
        strokeColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 30.5, y: 138.5))
        bezier5Path.addLine(to: CGPoint(x: 30.5, y: 140.5))
        bezier5Path.addCurve(to: CGPoint(x: 29.5, y: 141.5), controlPoint1: CGPoint(x: 30.5, y: 141.05), controlPoint2: CGPoint(x: 30.05, y: 141.5))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 141.5))
        bezier5Path.addCurve(to: CGPoint(x: 17.5, y: 140.5), controlPoint1: CGPoint(x: 17.95, y: 141.5), controlPoint2: CGPoint(x: 17.5, y: 141.05))
        bezier5Path.addLine(to: CGPoint(x: 17.5, y: 138.5))
        strokeColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()
        
        
        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 22.5, y: 134.5, width: 3, height: 4))
        strokeColor.setStroke()
        rectangle10Path.lineWidth = 1
        rectangle10Path.stroke()
        
        context.restoreGState()
        
    }
}
