//
//  UpgradeButtonFINALFINALFINAL2.swift
//  Pupster2.0
//
//  Created by MattSaucedo on 9/11/18.
//  Copyright © 2018 Pupster. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

extension StyleKit {
    
    //// Drawing Methods
    
    class func drawBasicStandardSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let strokeColor = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 14, width: 172, height: 31)
        let labelTextContent = "Basic"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 301, y: 14))
        bezier5Path.addCurve(to: CGPoint(x: 287, y: 28), controlPoint1: CGPoint(x: 293.3, y: 14), controlPoint2: CGPoint(x: 287, y: 20.3))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 42), controlPoint1: CGPoint(x: 287, y: 35.7), controlPoint2: CGPoint(x: 293.3, y: 42))
        bezier5Path.addCurve(to: CGPoint(x: 315, y: 28), controlPoint1: CGPoint(x: 308.7, y: 42), controlPoint2: CGPoint(x: 315, y: 35.7))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 14), controlPoint1: CGPoint(x: 315, y: 20.3), controlPoint2: CGPoint(x: 308.7, y: 14))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 307.74, y: 24.24))
        bezier5Path.addLine(to: CGPoint(x: 298.99, y: 32.99))
        bezier5Path.addCurve(to: CGPoint(x: 298.38, y: 33.25), controlPoint1: CGPoint(x: 298.81, y: 33.16), controlPoint2: CGPoint(x: 298.64, y: 33.25))
        bezier5Path.addCurve(to: CGPoint(x: 297.76, y: 32.99), controlPoint1: CGPoint(x: 298.11, y: 33.25), controlPoint2: CGPoint(x: 297.94, y: 33.16))
        bezier5Path.addLine(to: CGPoint(x: 294.26, y: 29.49))
        bezier5Path.addCurve(to: CGPoint(x: 294.26, y: 28.26), controlPoint1: CGPoint(x: 293.91, y: 29.14), controlPoint2: CGPoint(x: 293.91, y: 28.61))
        bezier5Path.addCurve(to: CGPoint(x: 295.49, y: 28.26), controlPoint1: CGPoint(x: 294.61, y: 27.91), controlPoint2: CGPoint(x: 295.14, y: 27.91))
        bezier5Path.addLine(to: CGPoint(x: 298.38, y: 31.15))
        bezier5Path.addLine(to: CGPoint(x: 306.51, y: 23.01))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 23.01), controlPoint1: CGPoint(x: 306.86, y: 22.66), controlPoint2: CGPoint(x: 307.39, y: 22.66))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 24.24), controlPoint1: CGPoint(x: 308.09, y: 23.36), controlPoint2: CGPoint(x: 308.09, y: 23.89))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 45, width: 286.14, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$9.99/month — Complete Pupster Program".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawPlusStandardNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 187, height: 31)
        let labelTextContent = "Plus"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.04, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$39.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 29, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "one".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 43.42, y: 52, width: 229.49, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chat every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawPremiumStandardNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor3.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 217, height: 31)
        let labelTextContent = "Premium"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.02, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$99.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 33, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "four".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 46.44, y: 52, width: 236.68, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chats every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawPlusStandardSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let textForeground3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor4.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 190, height: 31)
        let labelTextContent = "Plus"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 299, y: 10))
        bezier5Path.addCurve(to: CGPoint(x: 285, y: 24), controlPoint1: CGPoint(x: 291.3, y: 10), controlPoint2: CGPoint(x: 285, y: 16.3))
        bezier5Path.addCurve(to: CGPoint(x: 299, y: 38), controlPoint1: CGPoint(x: 285, y: 31.7), controlPoint2: CGPoint(x: 291.3, y: 38))
        bezier5Path.addCurve(to: CGPoint(x: 313, y: 24), controlPoint1: CGPoint(x: 306.7, y: 38), controlPoint2: CGPoint(x: 313, y: 31.7))
        bezier5Path.addCurve(to: CGPoint(x: 299, y: 10), controlPoint1: CGPoint(x: 313, y: 16.3), controlPoint2: CGPoint(x: 306.7, y: 10))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 305.74, y: 20.24))
        bezier5Path.addLine(to: CGPoint(x: 296.99, y: 28.99))
        bezier5Path.addCurve(to: CGPoint(x: 296.38, y: 29.25), controlPoint1: CGPoint(x: 296.81, y: 29.16), controlPoint2: CGPoint(x: 296.64, y: 29.25))
        bezier5Path.addCurve(to: CGPoint(x: 295.76, y: 28.99), controlPoint1: CGPoint(x: 296.11, y: 29.25), controlPoint2: CGPoint(x: 295.94, y: 29.16))
        bezier5Path.addLine(to: CGPoint(x: 292.26, y: 25.49))
        bezier5Path.addCurve(to: CGPoint(x: 292.26, y: 24.26), controlPoint1: CGPoint(x: 291.91, y: 25.14), controlPoint2: CGPoint(x: 291.91, y: 24.61))
        bezier5Path.addCurve(to: CGPoint(x: 293.49, y: 24.26), controlPoint1: CGPoint(x: 292.61, y: 23.91), controlPoint2: CGPoint(x: 293.14, y: 23.91))
        bezier5Path.addLine(to: CGPoint(x: 296.38, y: 27.15))
        bezier5Path.addLine(to: CGPoint(x: 304.51, y: 19.01))
        bezier5Path.addCurve(to: CGPoint(x: 305.74, y: 19.01), controlPoint1: CGPoint(x: 304.86, y: 18.66), controlPoint2: CGPoint(x: 305.39, y: 18.66))
        bezier5Path.addCurve(to: CGPoint(x: 305.74, y: 20.24), controlPoint1: CGPoint(x: 306.09, y: 19.36), controlPoint2: CGPoint(x: 306.09, y: 19.89))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.04, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$39.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 29, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "one".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 43.42, y: 52, width: 229.49, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chat every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawPremiumStandardSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor5.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor3.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 192, height: 31)
        let labelTextContent = "Premium"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 299, y: 10))
        bezier5Path.addCurve(to: CGPoint(x: 285, y: 24), controlPoint1: CGPoint(x: 291.3, y: 10), controlPoint2: CGPoint(x: 285, y: 16.3))
        bezier5Path.addCurve(to: CGPoint(x: 299, y: 38), controlPoint1: CGPoint(x: 285, y: 31.7), controlPoint2: CGPoint(x: 291.3, y: 38))
        bezier5Path.addCurve(to: CGPoint(x: 313, y: 24), controlPoint1: CGPoint(x: 306.7, y: 38), controlPoint2: CGPoint(x: 313, y: 31.7))
        bezier5Path.addCurve(to: CGPoint(x: 299, y: 10), controlPoint1: CGPoint(x: 313, y: 16.3), controlPoint2: CGPoint(x: 306.7, y: 10))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 305.74, y: 20.24))
        bezier5Path.addLine(to: CGPoint(x: 296.99, y: 28.99))
        bezier5Path.addCurve(to: CGPoint(x: 296.38, y: 29.25), controlPoint1: CGPoint(x: 296.81, y: 29.16), controlPoint2: CGPoint(x: 296.64, y: 29.25))
        bezier5Path.addCurve(to: CGPoint(x: 295.76, y: 28.99), controlPoint1: CGPoint(x: 296.11, y: 29.25), controlPoint2: CGPoint(x: 295.94, y: 29.16))
        bezier5Path.addLine(to: CGPoint(x: 292.26, y: 25.49))
        bezier5Path.addCurve(to: CGPoint(x: 292.26, y: 24.26), controlPoint1: CGPoint(x: 291.91, y: 25.14), controlPoint2: CGPoint(x: 291.91, y: 24.61))
        bezier5Path.addCurve(to: CGPoint(x: 293.49, y: 24.26), controlPoint1: CGPoint(x: 292.61, y: 23.91), controlPoint2: CGPoint(x: 293.14, y: 23.91))
        bezier5Path.addLine(to: CGPoint(x: 296.38, y: 27.15))
        bezier5Path.addLine(to: CGPoint(x: 304.51, y: 19.01))
        bezier5Path.addCurve(to: CGPoint(x: 305.74, y: 19.01), controlPoint1: CGPoint(x: 304.86, y: 18.66), controlPoint2: CGPoint(x: 305.39, y: 18.66))
        bezier5Path.addCurve(to: CGPoint(x: 305.74, y: 20.24), controlPoint1: CGPoint(x: 306.09, y: 19.36), controlPoint2: CGPoint(x: 306.09, y: 19.89))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.02, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$99.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 32, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "four".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 46.44, y: 52, width: 236.68, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chats every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawBasicStandardNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let strokeColor = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 14, width: 190, height: 31)
        let labelTextContent = "Basic"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 45, width: 286.14, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$9.99/month — Complete Pupster Program".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawBasicSelectedDiscount(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let strokeColor = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 14, width: 207, height: 31)
        let labelTextContent = "Basic — 10% off"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 301, y: 14))
        bezier5Path.addCurve(to: CGPoint(x: 287, y: 28), controlPoint1: CGPoint(x: 293.3, y: 14), controlPoint2: CGPoint(x: 287, y: 20.3))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 42), controlPoint1: CGPoint(x: 287, y: 35.7), controlPoint2: CGPoint(x: 293.3, y: 42))
        bezier5Path.addCurve(to: CGPoint(x: 315, y: 28), controlPoint1: CGPoint(x: 308.7, y: 42), controlPoint2: CGPoint(x: 315, y: 35.7))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 14), controlPoint1: CGPoint(x: 315, y: 20.3), controlPoint2: CGPoint(x: 308.7, y: 14))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 307.74, y: 24.24))
        bezier5Path.addLine(to: CGPoint(x: 298.99, y: 32.99))
        bezier5Path.addCurve(to: CGPoint(x: 298.38, y: 33.25), controlPoint1: CGPoint(x: 298.81, y: 33.16), controlPoint2: CGPoint(x: 298.64, y: 33.25))
        bezier5Path.addCurve(to: CGPoint(x: 297.76, y: 32.99), controlPoint1: CGPoint(x: 298.11, y: 33.25), controlPoint2: CGPoint(x: 297.94, y: 33.16))
        bezier5Path.addLine(to: CGPoint(x: 294.26, y: 29.49))
        bezier5Path.addCurve(to: CGPoint(x: 294.26, y: 28.26), controlPoint1: CGPoint(x: 293.91, y: 29.14), controlPoint2: CGPoint(x: 293.91, y: 28.61))
        bezier5Path.addCurve(to: CGPoint(x: 295.49, y: 28.26), controlPoint1: CGPoint(x: 294.61, y: 27.91), controlPoint2: CGPoint(x: 295.14, y: 27.91))
        bezier5Path.addLine(to: CGPoint(x: 298.38, y: 31.15))
        bezier5Path.addLine(to: CGPoint(x: 306.51, y: 23.01))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 23.01), controlPoint1: CGPoint(x: 306.86, y: 22.66), controlPoint2: CGPoint(x: 307.39, y: 22.66))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 24.24), controlPoint1: CGPoint(x: 308.09, y: 23.36), controlPoint2: CGPoint(x: 308.09, y: 23.89))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 45, width: 286.23, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$8.99/month — Complete Pupster Program".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 301, y: 14))
        bezier6Path.addCurve(to: CGPoint(x: 287, y: 28), controlPoint1: CGPoint(x: 293.3, y: 14), controlPoint2: CGPoint(x: 287, y: 20.3))
        bezier6Path.addCurve(to: CGPoint(x: 301, y: 42), controlPoint1: CGPoint(x: 287, y: 35.7), controlPoint2: CGPoint(x: 293.3, y: 42))
        bezier6Path.addCurve(to: CGPoint(x: 315, y: 28), controlPoint1: CGPoint(x: 308.7, y: 42), controlPoint2: CGPoint(x: 315, y: 35.7))
        bezier6Path.addCurve(to: CGPoint(x: 301, y: 14), controlPoint1: CGPoint(x: 315, y: 20.3), controlPoint2: CGPoint(x: 308.7, y: 14))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: 307.74, y: 24.24))
        bezier6Path.addLine(to: CGPoint(x: 298.99, y: 32.99))
        bezier6Path.addCurve(to: CGPoint(x: 298.38, y: 33.25), controlPoint1: CGPoint(x: 298.81, y: 33.16), controlPoint2: CGPoint(x: 298.64, y: 33.25))
        bezier6Path.addCurve(to: CGPoint(x: 297.76, y: 32.99), controlPoint1: CGPoint(x: 298.11, y: 33.25), controlPoint2: CGPoint(x: 297.94, y: 33.16))
        bezier6Path.addLine(to: CGPoint(x: 294.26, y: 29.49))
        bezier6Path.addCurve(to: CGPoint(x: 294.26, y: 28.26), controlPoint1: CGPoint(x: 293.91, y: 29.14), controlPoint2: CGPoint(x: 293.91, y: 28.61))
        bezier6Path.addCurve(to: CGPoint(x: 295.49, y: 28.26), controlPoint1: CGPoint(x: 294.61, y: 27.91), controlPoint2: CGPoint(x: 295.14, y: 27.91))
        bezier6Path.addLine(to: CGPoint(x: 298.38, y: 31.15))
        bezier6Path.addLine(to: CGPoint(x: 306.51, y: 23.01))
        bezier6Path.addCurve(to: CGPoint(x: 307.74, y: 23.01), controlPoint1: CGPoint(x: 306.86, y: 22.66), controlPoint2: CGPoint(x: 307.39, y: 22.66))
        bezier6Path.addCurve(to: CGPoint(x: 307.74, y: 24.24), controlPoint1: CGPoint(x: 308.09, y: 23.36), controlPoint2: CGPoint(x: 308.09, y: 23.89))
        bezier6Path.close()
        fillColor3.setFill()
        bezier6Path.fill()
        
        context.restoreGState()
        
    }
    
    class func drawPlusSelectedDiscount(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        let textForeground3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor4.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 212, height: 31)
        let labelTextContent = "Plus — 10% off"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.04, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$35.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 29, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "one".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 43.42, y: 52, width: 229.49, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground3,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chat every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 301, y: 14))
        bezier5Path.addCurve(to: CGPoint(x: 287, y: 28), controlPoint1: CGPoint(x: 293.3, y: 14), controlPoint2: CGPoint(x: 287, y: 20.3))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 42), controlPoint1: CGPoint(x: 287, y: 35.7), controlPoint2: CGPoint(x: 293.3, y: 42))
        bezier5Path.addCurve(to: CGPoint(x: 315, y: 28), controlPoint1: CGPoint(x: 308.7, y: 42), controlPoint2: CGPoint(x: 315, y: 35.7))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 14), controlPoint1: CGPoint(x: 315, y: 20.3), controlPoint2: CGPoint(x: 308.7, y: 14))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 307.74, y: 24.24))
        bezier5Path.addLine(to: CGPoint(x: 298.99, y: 32.99))
        bezier5Path.addCurve(to: CGPoint(x: 298.38, y: 33.25), controlPoint1: CGPoint(x: 298.81, y: 33.16), controlPoint2: CGPoint(x: 298.64, y: 33.25))
        bezier5Path.addCurve(to: CGPoint(x: 297.76, y: 32.99), controlPoint1: CGPoint(x: 298.11, y: 33.25), controlPoint2: CGPoint(x: 297.94, y: 33.16))
        bezier5Path.addLine(to: CGPoint(x: 294.26, y: 29.49))
        bezier5Path.addCurve(to: CGPoint(x: 294.26, y: 28.26), controlPoint1: CGPoint(x: 293.91, y: 29.14), controlPoint2: CGPoint(x: 293.91, y: 28.61))
        bezier5Path.addCurve(to: CGPoint(x: 295.49, y: 28.26), controlPoint1: CGPoint(x: 294.61, y: 27.91), controlPoint2: CGPoint(x: 295.14, y: 27.91))
        bezier5Path.addLine(to: CGPoint(x: 298.38, y: 31.15))
        bezier5Path.addLine(to: CGPoint(x: 306.51, y: 23.01))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 23.01), controlPoint1: CGPoint(x: 306.86, y: 22.66), controlPoint2: CGPoint(x: 307.39, y: 22.66))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 24.24), controlPoint1: CGPoint(x: 308.09, y: 23.36), controlPoint2: CGPoint(x: 308.09, y: 23.89))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()
        
        context.restoreGState()
        
    }
    
    class func drawPremiumSelectedDiscount(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        fillColor5.setFill()
        bezierPath.fill()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 10, y: 0))
        clip2Path.addLine(to: CGPoint(x: 317, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clip2Path.addLine(to: CGPoint(x: 327, y: 73))
        clip2Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clip2Path.addLine(to: CGPoint(x: 10, y: 83))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clip2Path.addLine(to: CGPoint(x: 0, y: 10))
        clip2Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 317, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezier3Path.addLine(to: CGPoint(x: 327, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezier3Path.close()
        strokeColor3.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 265, height: 31)
        let labelTextContent = "Premium — 10% off"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.04, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$89.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 32, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "four".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 46.44, y: 52, width: 236.68, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chats every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 301, y: 10))
        bezier5Path.addCurve(to: CGPoint(x: 287, y: 24), controlPoint1: CGPoint(x: 293.3, y: 10), controlPoint2: CGPoint(x: 287, y: 16.3))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 38), controlPoint1: CGPoint(x: 287, y: 31.7), controlPoint2: CGPoint(x: 293.3, y: 38))
        bezier5Path.addCurve(to: CGPoint(x: 315, y: 24), controlPoint1: CGPoint(x: 308.7, y: 38), controlPoint2: CGPoint(x: 315, y: 31.7))
        bezier5Path.addCurve(to: CGPoint(x: 301, y: 10), controlPoint1: CGPoint(x: 315, y: 16.3), controlPoint2: CGPoint(x: 308.7, y: 10))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 307.74, y: 20.24))
        bezier5Path.addLine(to: CGPoint(x: 298.99, y: 28.99))
        bezier5Path.addCurve(to: CGPoint(x: 298.38, y: 29.25), controlPoint1: CGPoint(x: 298.81, y: 29.16), controlPoint2: CGPoint(x: 298.64, y: 29.25))
        bezier5Path.addCurve(to: CGPoint(x: 297.76, y: 28.99), controlPoint1: CGPoint(x: 298.11, y: 29.25), controlPoint2: CGPoint(x: 297.94, y: 29.16))
        bezier5Path.addLine(to: CGPoint(x: 294.26, y: 25.49))
        bezier5Path.addCurve(to: CGPoint(x: 294.26, y: 24.26), controlPoint1: CGPoint(x: 293.91, y: 25.14), controlPoint2: CGPoint(x: 293.91, y: 24.61))
        bezier5Path.addCurve(to: CGPoint(x: 295.49, y: 24.26), controlPoint1: CGPoint(x: 294.61, y: 23.91), controlPoint2: CGPoint(x: 295.14, y: 23.91))
        bezier5Path.addLine(to: CGPoint(x: 298.38, y: 27.15))
        bezier5Path.addLine(to: CGPoint(x: 306.51, y: 19.01))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 19.01), controlPoint1: CGPoint(x: 306.86, y: 18.66), controlPoint2: CGPoint(x: 307.39, y: 18.66))
        bezier5Path.addCurve(to: CGPoint(x: 307.74, y: 20.24), controlPoint1: CGPoint(x: 308.09, y: 19.36), controlPoint2: CGPoint(x: 308.09, y: 19.89))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()
        
        context.restoreGState()
        
    }
    
    class func drawPlusDiscountNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.522, green: 0.286, blue: 0.729, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 232, height: 31)
        let labelTextContent = "Plus — 10% off"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.04, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$35.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 29, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "one".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 43.42, y: 52, width: 229.49, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chat every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawPremiumDiscountNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 0.690, blue: 0.125, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor3.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 5, width: 265, height: 31)
        let labelTextContent = "Premium — 10% off"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 33, width: 268.04, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$89.99/month — Complete program and".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        
        //// Label 3 Drawing
        let label3Rect = CGRect(x: 18, y: 52, width: 32, height: 20)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "SFProText-Bold", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
            ] as [NSAttributedStringKey: Any]
        
        "four".draw(in: label3Rect, withAttributes: label3FontAttributes)
        
        
        //// Label 4 Drawing
        let label4Rect = CGRect(x: 46.44, y: 52, width: 236.68, height: 20)
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label4Style,
            ] as [NSAttributedStringKey: Any]
        
        " 15-minute video chats every month".draw(in: label4Rect, withAttributes: label4FontAttributes)
        
        context.restoreGState()
        
    }
    
    class func drawBasicDiscountNotSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 83)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        let strokeColor = UIColor(red: 0.557, green: 0.878, blue: 0.000, alpha: 1.000)
        let textForeground = UIColor(red: 0.392, green: 0.385, blue: 0.436, alpha: 1.000)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 327, height: 83))
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 10, y: 0))
        clipPath.addLine(to: CGPoint(x: 317, y: 0))
        clipPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        clipPath.addLine(to: CGPoint(x: 327, y: 73))
        clipPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        clipPath.addLine(to: CGPoint(x: 10, y: 83))
        clipPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        clipPath.addLine(to: CGPoint(x: 0, y: 10))
        clipPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addLine(to: CGPoint(x: 317, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 327, y: 10), controlPoint1: CGPoint(x: 322.52, y: 0), controlPoint2: CGPoint(x: 327, y: 4.48))
        bezierPath.addLine(to: CGPoint(x: 327, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 317, y: 83), controlPoint1: CGPoint(x: 327, y: 78.52), controlPoint2: CGPoint(x: 322.52, y: 83))
        bezierPath.addLine(to: CGPoint(x: 10, y: 83))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 73), controlPoint1: CGPoint(x: 4.48, y: 83), controlPoint2: CGPoint(x: 0, y: 78.52))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 18, y: 14, width: 247, height: 31)
        let labelTextContent = "Basic — 10% off"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont(name: "SFProDisplay-Heavy", size: 21)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 18, y: 45, width: 286.23, height: 20)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "SFProText-Regular", size: 14)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
            ] as [NSAttributedStringKey: Any]
        
        "$8.99/month — Complete Pupster Program".draw(in: label2Rect, withAttributes: label2FontAttributes)
        
        context.restoreGState()
        
    }
    
}
