/**
* The MIT License (MIT)
* Copyright (c) 2017 Shopify Inc.
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
* DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
* OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
* OR OTHER DEALINGS IN THE SOFTWARE.
* 
* 
* Version: 1.1.0 Commit: e8b1fa8
**/'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  return {
    visitor: {
      ImportSpecifier(path, state) {
        // Find the gql import
        if (path.node.imported.name === 'gql') {
          // Save the name of the import
          state.tag = path.node.local.name;
        }
      },

      TaggedTemplateExpression(path, state) {
        if (path.node.tag.callee && path.node.tag.callee.name === state.tag) {
          path.traverse(templateElementVisitor, { parentPath: path, clientId: path.node.tag.arguments[0] });
        }
      }
    }
  };
};

exports.gql = gql;

var _graphqlToJsClientBuilder = require('graphql-to-js-client-builder');

const templateElementVisitor = {
  TemplateElement(path) {
    const statementParentPath = path.getStatementParent();
    const clientVar = this.clientId.name;
    const documentVar = statementParentPath.scope.generateUidIdentifier('document').name;
    const spreadsVar = statementParentPath.scope.generateUidIdentifier('spreads').name;

    const graphQlCode = path.node.value.raw;

    const jsAst = (0, _graphqlToJsClientBuilder.transformToAst)(graphQlCode, clientVar, documentVar, spreadsVar);

    statementParentPath.insertBefore(jsAst);

    this.parentPath.replaceWithSourceString(documentVar);
  }
};

/**
 * This function should not be invoked.
 * This function is used to tag raw GraphQL queries that will be
 * transcompiled into graphql-js-client's query builder syntax.
 */
function gql() {
  throw new Error(`This function should not be invoked. It should be used to tag template literals that will be
    transcompiled into graphql-js-client's query builder syntax.`);
}