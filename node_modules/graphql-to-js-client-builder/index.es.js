/*
The MIT License (MIT)
Copyright (c) 2016 Shopify Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.


Version: 0.0.1 Commit: 76b290e
*/
import { parse, visit } from 'graphql/language';
import { arrayExpression, arrowFunctionExpression, assignmentExpression, blockStatement, booleanLiteral, callExpression, expressionStatement, identifier, memberExpression, numericLiteral, objectExpression, objectProperty, program, stringLiteral, variableDeclaration, variableDeclarator } from 'babel-types';
import * as t from 'babel-types';
import generate from 'babel-generator';

// Recursive helper function for sortDefinitions
function visitFragment(fragment, fragments, fragmentsHash) {
  if (fragment.marked) {
    throw Error('Fragments cannot contain a cycle');
  }
  if (!fragment.visited) {
    fragment.marked = true;
    // Visit every spread in this fragment definition
    visit(fragment, {
      FragmentSpread(node) {
        // Visit the corresponding fragment definition
        visitFragment(fragmentsHash[node.name.value], fragments, fragmentsHash);
      }
    });
    fragment.visited = true;
    fragment.marked = false;
    fragments.push(fragment);
  }
}

// Sorts the definitions such that all fragment definitions are before operation
// definitions and fragments definitions are in reverse topological order
function sortDefinitions(definitions) {
  const fragments = definitions.filter(definition => {
    return definition.kind === 'FragmentDefinition';
  });

  // Set up a hash for quick lookup
  const fragmentsHash = {};

  fragments.forEach(fragment => {
    fragmentsHash[fragment.name.value] = fragment;
  });

  const operations = definitions.filter(definition => {
    return definition.kind === 'OperationDefinition';
  });

  const sortedFragments = [];

  fragments.forEach(fragment => {
    if (!fragment.visited) {
      visitFragment(fragment, sortedFragments, fragmentsHash);
    }
  });

  return sortedFragments.concat(operations);
}

function argValueToJS(argumentValue, clientVar) {
  switch (argumentValue.kind) {
    case 'StringValue':
      return stringLiteral(argumentValue.value);
    case 'EnumValue':
      return callExpression(memberExpression(clientVar, identifier('enum')), [stringLiteral(argumentValue.value)]);
    case 'IntValue':
      return numericLiteral(parseInt(argumentValue.value, 10));
    case 'FloatValue':
      return numericLiteral(parseFloat(argumentValue.value));
    case 'BooleanValue':
      return booleanLiteral(argumentValue.value);
    case 'ListValue':
      return arrayExpression(argumentValue.values.map(value => argValueToJS(value, clientVar)));
    case 'ObjectValue':
      return objectExpression(argumentValue.fields.map(field => {
        return objectProperty(identifier(field.name.value), argValueToJS(field.value, clientVar));
      }));
    case 'Variable':
      return callExpression(memberExpression(clientVar, identifier('variable')), [stringLiteral(argumentValue.name.value)]);
    default:
      throw Error(`Unrecognized argument value type "${argumentValue.kind}"`);
  }
}

function argsToJS(key, args, clientVar) {
  const argFields = args.map(argument => {
    return objectProperty(identifier(argument.name.value), argValueToJS(argument.value, clientVar));
  });

  return objectProperty(key, objectExpression(argFields));
}

function identifyOperation(selection, spreadsVar) {
  switch (selection.kind) {
    case 'Field':
      return {
        selectionConstructionArgs: [stringLiteral(selection.name.value)],
        operationMethodName: 'add',
        kind: 'Field'
      };
    case 'InlineFragment':
      return {
        selectionConstructionArgs: [stringLiteral(selection.typeCondition.name.value)],
        operationMethodName: 'addInlineFragmentOn',
        kind: 'InlineFragment'
      };
    default:
      return {
        selectionConstructionArgs: [memberExpression(spreadsVar, identifier(selection.name.value))],
        operationMethodName: 'addFragment',
        kind: 'Fragment'
      };
  }
}

function applyAlias(options, selection) {
  if (selection.alias) {
    options.push(objectProperty(identifier('alias'), stringLiteral(selection.alias.value)));
  }
}

function applyArguments(options, selection, clientVar) {
  if (!(selection.arguments && selection.arguments.length)) {
    return;
  }

  options.push(argsToJS(identifier('args'), selection.arguments, clientVar));
}

// Returns the body of the block statement representing the selections
function selectionSetToJS(selectionSet, parentSelectionName, spreadsVar, clientVar) {
  const selections = selectionSet.selections.map(selection => {
    var _identifyOperation = identifyOperation(selection, spreadsVar);

    const selectionConstructionArgs = _identifyOperation.selectionConstructionArgs,
          operationMethodName = _identifyOperation.operationMethodName,
          kind = _identifyOperation.kind;

    const fieldOptions = [];

    applyAlias(fieldOptions, selection);
    applyArguments(fieldOptions, selection, clientVar);

    // Add query options (i.e. alias and arguments) to the query
    if (fieldOptions.length) {
      selectionConstructionArgs.push(objectExpression(fieldOptions));
    }

    if (['Field', 'InlineFragment'].includes(kind) && selection.selectionSet) {
      const fieldNameOrTypeConstraint = selectionConstructionArgs[0].value;

      selectionConstructionArgs.push(selectionSetToJS(selection.selectionSet, fieldNameOrTypeConstraint, spreadsVar, clientVar));
    }

    return expressionStatement(callExpression(memberExpression(identifier(parentSelectionName), identifier(operationMethodName)), selectionConstructionArgs));
  });

  return arrowFunctionExpression([identifier(parentSelectionName)], blockStatement(selections));
}

function fragmentVisitor(jsNodes, clientVar, documentVar, spreadsVar) {
  return function visitor(node) {
    const selectionRootName = 'root';
    const fragmentDefinitionArguments = [stringLiteral(node.name.value), stringLiteral(node.typeCondition.name.value), selectionSetToJS(node.selectionSet, selectionRootName, spreadsVar, clientVar)];

    jsNodes.push(expressionStatement(assignmentExpression('=', memberExpression(spreadsVar, identifier(node.name.value)), callExpression(memberExpression(documentVar, identifier('defineFragment')), fragmentDefinitionArguments))));
  };
}

function typeConstraint(variableAst) {
  switch (variableAst.kind) {
    case 'NonNullType':
      return `${typeConstraint(variableAst.type)}!`;
    case 'ListType':
      return `[${typeConstraint(variableAst.type)}]`;
    default:
      return variableAst.name.value;
  }
}

function constructJSDefinition(variableAst, clientVar) {
  const variableConstructionArgs = [stringLiteral(variableAst.variable.name.value), stringLiteral(typeConstraint(variableAst.type))];

  if (variableAst.defaultValue) {
    variableConstructionArgs.push(argValueToJS(variableAst.defaultValue, clientVar));
  }

  return callExpression(memberExpression(clientVar, identifier('variable')), variableConstructionArgs);
}

function variableDeclarationsToJS(definitions, clientVar) {
  return arrayExpression(definitions.map(definition => constructJSDefinition(definition, clientVar)));
}

function applyName(graphQLNode, argList) {
  if (graphQLNode.name) {
    argList.push(stringLiteral(graphQLNode.name.value));
  }
}

function applyVariables(graphQLNode, argList, clientVar) {
  const definitions = graphQLNode.variableDefinitions;

  if (!(definitions && definitions.length)) {
    return;
  }

  argList.push(variableDeclarationsToJS(definitions, clientVar));
}

function operationFactoryFunction(graphQLNode) {
  switch (graphQLNode.operation) {
    case 'query':
      return 'addQuery';
    case 'mutation':
      return 'addMutation';
    default:
      throw new Error(`Operation: "${graphQLNode.operation}" is not currently supported`);
  }
}

function operationVisitor(jsNodes, clientVar, documentVar, spreadsVar) {
  return function visitor(node) {
    const selectionRootName = 'root';
    const operationDefinitionArgs = [];

    applyName(node, operationDefinitionArgs);
    applyVariables(node, operationDefinitionArgs, clientVar);

    operationDefinitionArgs.push(selectionSetToJS(node.selectionSet, selectionRootName, spreadsVar, clientVar));

    jsNodes.push(expressionStatement(callExpression(memberExpression(documentVar, identifier(operationFactoryFunction(node))), operationDefinitionArgs)));
  };
}

function extractFragmentDefinitons(definitions) {
  return definitions.filter(definition => definition.kind === 'FragmentDefinition');
}

function insertSpreadVar(nodes, identifier$$1) {
  nodes.push(variableDeclaration('const', [variableDeclarator(identifier$$1, objectExpression([]))]));
}

function declareDocument(nodes, clientVar, documentVar) {
  nodes.push(variableDeclaration('const', [variableDeclarator(documentVar, callExpression(memberExpression(clientVar, identifier('document')), []))]));
}

function documentToJSAst(graphQLAst, clientVar, documentVar, spreadsVar) {
  const jsGraphQLNodes = [];

  declareDocument(jsGraphQLNodes, clientVar, documentVar);

  const sortedgraphQLAst = Object.assign({}, graphQLAst, { definitions: sortDefinitions(graphQLAst.definitions) });
  const fragmentDefinitons = extractFragmentDefinitons(sortedgraphQLAst.definitions);

  if (fragmentDefinitons.length) {
    insertSpreadVar(jsGraphQLNodes, spreadsVar);
  }

  visit(sortedgraphQLAst, {
    FragmentDefinition: fragmentVisitor(jsGraphQLNodes, clientVar, documentVar, spreadsVar),
    OperationDefinition: operationVisitor(jsGraphQLNodes, clientVar, documentVar, spreadsVar)
  });

  return jsGraphQLNodes;
}

function transformToAst(graphqlCode, clientVar = 'client', documentVar = 'document', spreadsVar = 'spreads') {
  const graphQLAst = parse(graphqlCode);

  return documentToJSAst(graphQLAst, identifier(clientVar), identifier(documentVar), identifier(spreadsVar));
}

function transformToCode(graphqlCode, clientVar = 'client', documentVar = 'document', spreadsVar = 'spreads') {
  const jsAst = transformToAst(graphqlCode, clientVar, documentVar, spreadsVar);

  return `${generate(program(jsAst)).code}\n`;
}

export { transformToAst };export default transformToCode;
//# sourceMappingURL=index.es.js.map
