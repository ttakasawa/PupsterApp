{"version":3,"file":"index.es.js","sources":["src/sort-definitions.js","src/arg-value-to-js.js","src/arg-to-js.js","src/selection-set-to-js.js","src/fragment-visitor.js","src/variable-declaration-to-js.js","src/operation-visitor.js","src/document-to-js-ast.js","src/index.js"],"sourcesContent":["import {visit} from 'graphql/language';\n\n// Recursive helper function for sortDefinitions\nfunction visitFragment(fragment, fragments, fragmentsHash) {\n  if (fragment.marked) {\n    throw Error('Fragments cannot contain a cycle');\n  }\n  if (!fragment.visited) {\n    fragment.marked = true;\n    // Visit every spread in this fragment definition\n    visit(fragment, {\n      FragmentSpread(node) {\n        // Visit the corresponding fragment definition\n        visitFragment(fragmentsHash[node.name.value], fragments, fragmentsHash);\n      }\n    });\n    fragment.visited = true;\n    fragment.marked = false;\n    fragments.push(fragment);\n  }\n}\n\n// Sorts the definitions such that all fragment definitions are before operation\n// definitions and fragments definitions are in reverse topological order\nexport default function sortDefinitions(definitions) {\n  const fragments = definitions.filter((definition) => {\n    return definition.kind === 'FragmentDefinition';\n  });\n\n  // Set up a hash for quick lookup\n  const fragmentsHash = {};\n\n  fragments.forEach((fragment) => {\n    fragmentsHash[fragment.name.value] = fragment;\n  });\n\n  const operations = definitions.filter((definition) => {\n    return definition.kind === 'OperationDefinition';\n  });\n\n  const sortedFragments = [];\n\n  fragments.forEach((fragment) => {\n    if (!fragment.visited) {\n      visitFragment(fragment, sortedFragments, fragmentsHash);\n    }\n  });\n\n  return sortedFragments.concat(operations);\n}\n","import * as t from 'babel-types';\n\nexport default function argValueToJS(argumentValue, clientVar) {\n  switch (argumentValue.kind) {\n    case 'StringValue':\n      return t.stringLiteral(argumentValue.value);\n    case 'EnumValue':\n      return t.callExpression(\n        t.memberExpression(clientVar, t.identifier('enum')),\n        [t.stringLiteral(argumentValue.value)]\n      );\n    case 'IntValue':\n      return t.numericLiteral(parseInt(argumentValue.value, 10));\n    case 'FloatValue':\n      return t.numericLiteral(parseFloat(argumentValue.value));\n    case 'BooleanValue':\n      return t.booleanLiteral(argumentValue.value);\n    case 'ListValue':\n      return t.arrayExpression(argumentValue.values.map((value) => argValueToJS(value, clientVar)));\n    case 'ObjectValue':\n      return t.objectExpression(argumentValue.fields.map((field) => {\n        return t.objectProperty(t.identifier(field.name.value), argValueToJS(field.value, clientVar));\n      }));\n    case 'Variable':\n      return t.callExpression(\n        t.memberExpression(\n          clientVar,\n          t.identifier('variable')\n        ),\n        [t.stringLiteral(argumentValue.name.value)]\n      );\n    default:\n      throw Error(`Unrecognized argument value type \"${argumentValue.kind}\"`);\n  }\n}\n","import * as t from 'babel-types';\nimport argValueToJS from './arg-value-to-js';\n\nexport default function argsToJS(key, args, clientVar) {\n  const argFields = args.map((argument) => {\n    return t.objectProperty(t.identifier(argument.name.value), argValueToJS(argument.value, clientVar));\n  });\n\n  return t.objectProperty(key, t.objectExpression(argFields));\n}\n","import * as t from 'babel-types';\nimport argToJS from './arg-to-js';\n\nfunction identifyOperation(selection, spreadsVar) {\n  switch (selection.kind) {\n    case 'Field':\n      return {\n        selectionConstructionArgs: [t.stringLiteral(selection.name.value)],\n        operationMethodName: 'add',\n        kind: 'Field'\n      };\n    case 'InlineFragment':\n      return {\n        selectionConstructionArgs: [t.stringLiteral(selection.typeCondition.name.value)],\n        operationMethodName: 'addInlineFragmentOn',\n        kind: 'InlineFragment'\n      };\n    default:\n      return {\n        selectionConstructionArgs: [t.memberExpression(spreadsVar, t.identifier(selection.name.value))],\n        operationMethodName: 'addFragment',\n        kind: 'Fragment'\n      };\n  }\n}\n\nfunction applyAlias(options, selection) {\n  if (selection.alias) {\n    options.push(t.objectProperty(t.identifier('alias'), t.stringLiteral(selection.alias.value)));\n  }\n}\n\nfunction applyArguments(options, selection, clientVar) {\n  if (!(selection.arguments && selection.arguments.length)) {\n    return;\n  }\n\n  options.push(argToJS(t.identifier('args'), selection.arguments, clientVar));\n}\n\n// Returns the body of the block statement representing the selections\nexport default function selectionSetToJS(selectionSet, parentSelectionName, spreadsVar, clientVar) {\n  const selections = selectionSet.selections.map((selection) => {\n    const {selectionConstructionArgs, operationMethodName, kind} = identifyOperation(selection, spreadsVar);\n    const fieldOptions = [];\n\n    applyAlias(fieldOptions, selection);\n    applyArguments(fieldOptions, selection, clientVar);\n\n    // Add query options (i.e. alias and arguments) to the query\n    if (fieldOptions.length) {\n      selectionConstructionArgs.push(t.objectExpression(fieldOptions));\n    }\n\n    if (['Field', 'InlineFragment'].includes(kind) && selection.selectionSet) {\n      const fieldNameOrTypeConstraint = selectionConstructionArgs[0].value;\n\n      selectionConstructionArgs.push(\n        selectionSetToJS(selection.selectionSet, fieldNameOrTypeConstraint, spreadsVar, clientVar)\n      );\n    }\n\n    return t.expressionStatement(\n      t.callExpression(\n        t.memberExpression(\n          t.identifier(parentSelectionName),\n          t.identifier(operationMethodName)\n        ),\n        selectionConstructionArgs\n      )\n    );\n  });\n\n  return t.arrowFunctionExpression([t.identifier(parentSelectionName)], t.blockStatement(selections));\n}\n","import * as t from 'babel-types';\nimport selectionSetToJS from './selection-set-to-js';\n\nexport default function fragmentVisitor(jsNodes, clientVar, documentVar, spreadsVar) {\n  return function visitor(node) {\n    const selectionRootName = 'root';\n    const fragmentDefinitionArguments = [\n      t.stringLiteral(node.name.value),\n      t.stringLiteral(node.typeCondition.name.value),\n      selectionSetToJS(node.selectionSet, selectionRootName, spreadsVar, clientVar)\n    ];\n\n    jsNodes.push(t.expressionStatement(\n      t.assignmentExpression(\n        '=',\n        t.memberExpression(spreadsVar, t.identifier(node.name.value)),\n        t.callExpression(\n          t.memberExpression(documentVar, t.identifier('defineFragment')),\n          fragmentDefinitionArguments\n        )\n      )\n    ));\n  };\n}\n","import * as t from 'babel-types';\nimport argValueToJS from './arg-value-to-js';\n\nfunction typeConstraint(variableAst) {\n  switch (variableAst.kind) {\n    case 'NonNullType':\n      return `${typeConstraint(variableAst.type)}!`;\n    case 'ListType':\n      return `[${typeConstraint(variableAst.type)}]`;\n    default:\n      return variableAst.name.value;\n  }\n}\n\nfunction constructJSDefinition(variableAst, clientVar) {\n  const variableConstructionArgs = [\n    t.stringLiteral(variableAst.variable.name.value),\n    t.stringLiteral(typeConstraint(variableAst.type))\n  ];\n\n  if (variableAst.defaultValue) {\n    variableConstructionArgs.push(argValueToJS(variableAst.defaultValue, clientVar));\n  }\n\n  return t.callExpression(\n    t.memberExpression(\n      clientVar,\n      t.identifier('variable')\n    ),\n    variableConstructionArgs\n  );\n}\n\nexport default function variableDeclarationsToJS(definitions, clientVar) {\n  return t.arrayExpression(definitions.map((definition) => constructJSDefinition(definition, clientVar)));\n}\n","import * as t from 'babel-types';\nimport selectionSetToJS from './selection-set-to-js';\nimport parseVariable from './variable-declaration-to-js';\n\nfunction applyName(graphQLNode, argList) {\n  if (graphQLNode.name) {\n    argList.push(t.stringLiteral(graphQLNode.name.value));\n  }\n}\n\nfunction applyVariables(graphQLNode, argList, clientVar) {\n  const definitions = graphQLNode.variableDefinitions;\n\n  if (!(definitions && definitions.length)) {\n    return;\n  }\n\n  argList.push(parseVariable(definitions, clientVar));\n}\n\nfunction operationFactoryFunction(graphQLNode) {\n  switch (graphQLNode.operation) {\n    case 'query':\n      return 'addQuery';\n    case 'mutation':\n      return 'addMutation';\n    default:\n      throw new Error(`Operation: \"${graphQLNode.operation}\" is not currently supported`);\n  }\n}\n\nexport default function operationVisitor(jsNodes, clientVar, documentVar, spreadsVar) {\n  return function visitor(node) {\n    const selectionRootName = 'root';\n    const operationDefinitionArgs = [];\n\n    applyName(node, operationDefinitionArgs);\n    applyVariables(node, operationDefinitionArgs, clientVar);\n\n    operationDefinitionArgs.push(\n      selectionSetToJS(node.selectionSet, selectionRootName, spreadsVar, clientVar)\n    );\n\n    jsNodes.push(t.expressionStatement(t.callExpression(\n      t.memberExpression(documentVar, t.identifier(operationFactoryFunction(node))),\n      operationDefinitionArgs\n    )));\n  };\n}\n","import * as t from 'babel-types';\nimport {visit} from 'graphql/language';\nimport sortDefinitions from './sort-definitions';\nimport fragmentVisitor from './fragment-visitor';\nimport operationVisitor from './operation-visitor';\n\nfunction extractFragmentDefinitons(definitions) {\n  return definitions.filter((definition) => definition.kind === 'FragmentDefinition');\n}\n\nfunction insertSpreadVar(nodes, identifier) {\n  nodes.push(t.variableDeclaration('const', [\n    t.variableDeclarator(identifier, t.objectExpression([]))\n  ]));\n}\n\nfunction declareDocument(nodes, clientVar, documentVar) {\n  nodes.push(t.variableDeclaration('const', [\n    t.variableDeclarator(documentVar,\n      t.callExpression(\n        t.memberExpression(clientVar, t.identifier('document')),\n        []\n      )\n    )\n  ]));\n}\n\nexport default function documentToJSAst(graphQLAst, clientVar, documentVar, spreadsVar) {\n  const jsGraphQLNodes = [];\n\n  declareDocument(jsGraphQLNodes, clientVar, documentVar);\n\n  const sortedgraphQLAst = Object.assign(\n    {},\n    graphQLAst,\n    {definitions: sortDefinitions(graphQLAst.definitions)}\n  );\n  const fragmentDefinitons = extractFragmentDefinitons(sortedgraphQLAst.definitions);\n\n  if (fragmentDefinitons.length) {\n    insertSpreadVar(jsGraphQLNodes, spreadsVar);\n  }\n\n  visit(sortedgraphQLAst, {\n    FragmentDefinition: fragmentVisitor(jsGraphQLNodes, clientVar, documentVar, spreadsVar),\n    OperationDefinition: operationVisitor(jsGraphQLNodes, clientVar, documentVar, spreadsVar)\n  });\n\n  return jsGraphQLNodes;\n}\n","import {parse} from 'graphql/language';\nimport * as t from 'babel-types';\nimport generate from 'babel-generator';\nimport documentToJSAst from './document-to-js-ast';\n\nexport function transformToAst(graphqlCode, clientVar = 'client', documentVar = 'document', spreadsVar = 'spreads') {\n  const graphQLAst = parse(graphqlCode);\n\n  return documentToJSAst(graphQLAst, t.identifier(clientVar), t.identifier(documentVar), t.identifier(spreadsVar));\n}\n\nexport default function transformToCode(graphqlCode, clientVar = 'client', documentVar = 'document', spreadsVar = 'spreads') {\n  const jsAst = transformToAst(graphqlCode, clientVar, documentVar, spreadsVar);\n\n  return `${generate(t.program(jsAst)).code}\\n`;\n}\n"],"names":["visitFragment","fragment","fragments","fragmentsHash","marked","Error","visited","node","name","value","push","sortDefinitions","definitions","filter","definition","kind","forEach","operations","sortedFragments","concat","argValueToJS","argumentValue","clientVar","t","parseInt","parseFloat","values","map","fields","field","argsToJS","key","args","argFields","argument","identifyOperation","selection","spreadsVar","typeCondition","applyAlias","options","alias","applyArguments","arguments","length","argToJS","selectionSetToJS","selectionSet","parentSelectionName","selections","selectionConstructionArgs","operationMethodName","fieldOptions","includes","fieldNameOrTypeConstraint","fragmentVisitor","jsNodes","documentVar","visitor","selectionRootName","fragmentDefinitionArguments","typeConstraint","variableAst","type","constructJSDefinition","variableConstructionArgs","variable","defaultValue","variableDeclarationsToJS","applyName","graphQLNode","argList","applyVariables","variableDefinitions","parseVariable","operationFactoryFunction","operation","operationVisitor","operationDefinitionArgs","extractFragmentDefinitons","insertSpreadVar","nodes","identifier","declareDocument","documentToJSAst","graphQLAst","jsGraphQLNodes","sortedgraphQLAst","Object","assign","fragmentDefinitons","transformToAst","graphqlCode","parse","transformToCode","jsAst","generate","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA,SAASA,aAAT,CAAuBC,QAAvB,EAAiCC,SAAjC,EAA4CC,aAA5C,EAA2D;MACrDF,SAASG,MAAb,EAAqB;UACbC,MAAM,kCAAN,CAAN;;MAEE,CAACJ,SAASK,OAAd,EAAuB;aACZF,MAAT,GAAkB,IAAlB;;UAEMH,QAAN,EAAgB;qBACCM,IAAf,EAAqB;;sBAELJ,cAAcI,KAAKC,IAAL,CAAUC,KAAxB,CAAd,EAA8CP,SAA9C,EAAyDC,aAAzD;;KAHJ;aAMSG,OAAT,GAAmB,IAAnB;aACSF,MAAT,GAAkB,KAAlB;cACUM,IAAV,CAAeT,QAAf;;;;;;AAMJ,AAAe,SAASU,eAAT,CAAyBC,WAAzB,EAAsC;QAC7CV,YAAYU,YAAYC,MAAZ,CAAoBC,UAAD,IAAgB;WAC5CA,WAAWC,IAAX,KAAoB,oBAA3B;GADgB,CAAlB;;;QAKMZ,gBAAgB,EAAtB;;YAEUa,OAAV,CAAmBf,QAAD,IAAc;kBAChBA,SAASO,IAAT,CAAcC,KAA5B,IAAqCR,QAArC;GADF;;QAIMgB,aAAaL,YAAYC,MAAZ,CAAoBC,UAAD,IAAgB;WAC7CA,WAAWC,IAAX,KAAoB,qBAA3B;GADiB,CAAnB;;QAIMG,kBAAkB,EAAxB;;YAEUF,OAAV,CAAmBf,QAAD,IAAc;QAC1B,CAACA,SAASK,OAAd,EAAuB;oBACPL,QAAd,EAAwBiB,eAAxB,EAAyCf,aAAzC;;GAFJ;;SAMOe,gBAAgBC,MAAhB,CAAuBF,UAAvB,CAAP;;;AC9Ca,SAASG,YAAT,CAAsBC,aAAtB,EAAqCC,SAArC,EAAgD;UACrDD,cAAcN,IAAtB;SACO,aAAL;aACSQ,aAAA,CAAgBF,cAAcZ,KAA9B,CAAP;SACG,WAAL;aACSc,cAAA,CACLA,gBAAA,CAAmBD,SAAnB,EAA8BC,UAAA,CAAa,MAAb,CAA9B,CADK,EAEL,CAACA,aAAA,CAAgBF,cAAcZ,KAA9B,CAAD,CAFK,CAAP;SAIG,UAAL;aACSc,cAAA,CAAiBC,SAASH,cAAcZ,KAAvB,EAA8B,EAA9B,CAAjB,CAAP;SACG,YAAL;aACSc,cAAA,CAAiBE,WAAWJ,cAAcZ,KAAzB,CAAjB,CAAP;SACG,cAAL;aACSc,cAAA,CAAiBF,cAAcZ,KAA/B,CAAP;SACG,WAAL;aACSc,eAAA,CAAkBF,cAAcK,MAAd,CAAqBC,GAArB,CAA0BlB,KAAD,IAAWW,aAAaX,KAAb,EAAoBa,SAApB,CAApC,CAAlB,CAAP;SACG,aAAL;aACSC,gBAAA,CAAmBF,cAAcO,MAAd,CAAqBD,GAArB,CAA0BE,KAAD,IAAW;eACrDN,cAAA,CAAiBA,UAAA,CAAaM,MAAMrB,IAAN,CAAWC,KAAxB,CAAjB,EAAiDW,aAAaS,MAAMpB,KAAnB,EAA0Ba,SAA1B,CAAjD,CAAP;OADwB,CAAnB,CAAP;SAGG,UAAL;aACSC,cAAA,CACLA,gBAAA,CACED,SADF,EAEEC,UAAA,CAAa,UAAb,CAFF,CADK,EAKL,CAACA,aAAA,CAAgBF,cAAcb,IAAd,CAAmBC,KAAnC,CAAD,CALK,CAAP;;YAQMJ,MAAO,qCAAoCgB,cAAcN,IAAK,GAA9D,CAAN;;;;AC7BS,SAASe,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BV,SAA7B,EAAwC;QAC/CW,YAAYD,KAAKL,GAAL,CAAUO,QAAD,IAAc;WAChCX,cAAA,CAAiBA,UAAA,CAAaW,SAAS1B,IAAT,CAAcC,KAA3B,CAAjB,EAAoDW,aAAac,SAASzB,KAAtB,EAA6Ba,SAA7B,CAApD,CAAP;GADgB,CAAlB;;SAIOC,cAAA,CAAiBQ,GAAjB,EAAsBR,gBAAA,CAAmBU,SAAnB,CAAtB,CAAP;;;ACLF,SAASE,iBAAT,CAA2BC,SAA3B,EAAsCC,UAAtC,EAAkD;UACxCD,UAAUrB,IAAlB;SACO,OAAL;aACS;mCACsB,CAACQ,aAAA,CAAgBa,UAAU5B,IAAV,CAAeC,KAA/B,CAAD,CADtB;6BAEgB,KAFhB;cAGC;OAHR;SAKG,gBAAL;aACS;mCACsB,CAACc,aAAA,CAAgBa,UAAUE,aAAV,CAAwB9B,IAAxB,CAA6BC,KAA7C,CAAD,CADtB;6BAEgB,qBAFhB;cAGC;OAHR;;aAMO;mCACsB,CAACc,gBAAA,CAAmBc,UAAnB,EAA+Bd,UAAA,CAAaa,UAAU5B,IAAV,CAAeC,KAA5B,CAA/B,CAAD,CADtB;6BAEgB,aAFhB;cAGC;OAHR;;;;AAQN,SAAS8B,UAAT,CAAoBC,OAApB,EAA6BJ,SAA7B,EAAwC;MAClCA,UAAUK,KAAd,EAAqB;YACX/B,IAAR,CAAaa,cAAA,CAAiBA,UAAA,CAAa,OAAb,CAAjB,EAAwCA,aAAA,CAAgBa,UAAUK,KAAV,CAAgBhC,KAAhC,CAAxC,CAAb;;;;AAIJ,SAASiC,cAAT,CAAwBF,OAAxB,EAAiCJ,SAAjC,EAA4Cd,SAA5C,EAAuD;MACjD,EAAEc,UAAUO,SAAV,IAAuBP,UAAUO,SAAV,CAAoBC,MAA7C,CAAJ,EAA0D;;;;UAIlDlC,IAAR,CAAamC,SAAQtB,UAAA,CAAa,MAAb,CAAR,EAA8Ba,UAAUO,SAAxC,EAAmDrB,SAAnD,CAAb;;;;AAIF,AAAe,SAASwB,gBAAT,CAA0BC,YAA1B,EAAwCC,mBAAxC,EAA6DX,UAA7D,EAAyEf,SAAzE,EAAoF;QAC3F2B,aAAaF,aAAaE,UAAb,CAAwBtB,GAAxB,CAA6BS,SAAD,IAAe;6BACGD,kBAAkBC,SAAlB,EAA6BC,UAA7B,CADH;;UACrDa,yBADqD,sBACrDA,yBADqD;UAC1BC,mBAD0B,sBAC1BA,mBAD0B;UACLpC,IADK,sBACLA,IADK;;UAEtDqC,eAAe,EAArB;;eAEWA,YAAX,EAAyBhB,SAAzB;mBACegB,YAAf,EAA6BhB,SAA7B,EAAwCd,SAAxC;;;QAGI8B,aAAaR,MAAjB,EAAyB;gCACGlC,IAA1B,CAA+Ba,gBAAA,CAAmB6B,YAAnB,CAA/B;;;QAGE,CAAC,OAAD,EAAU,gBAAV,EAA4BC,QAA5B,CAAqCtC,IAArC,KAA8CqB,UAAUW,YAA5D,EAA0E;YAClEO,4BAA4BJ,0BAA0B,CAA1B,EAA6BzC,KAA/D;;gCAE0BC,IAA1B,CACEoC,iBAAiBV,UAAUW,YAA3B,EAAyCO,yBAAzC,EAAoEjB,UAApE,EAAgFf,SAAhF,CADF;;;WAKKC,mBAAA,CACLA,cAAA,CACEA,gBAAA,CACEA,UAAA,CAAayB,mBAAb,CADF,EAEEzB,UAAA,CAAa4B,mBAAb,CAFF,CADF,EAKED,yBALF,CADK,CAAP;GApBiB,CAAnB;;SA+BO3B,uBAAA,CAA0B,CAACA,UAAA,CAAayB,mBAAb,CAAD,CAA1B,EAA+DzB,cAAA,CAAiB0B,UAAjB,CAA/D,CAAP;;;ACtEa,SAASM,eAAT,CAAyBC,OAAzB,EAAkClC,SAAlC,EAA6CmC,WAA7C,EAA0DpB,UAA1D,EAAsE;SAC5E,SAASqB,OAAT,CAAiBnD,IAAjB,EAAuB;UACtBoD,oBAAoB,MAA1B;UACMC,8BAA8B,CAClCrC,aAAA,CAAgBhB,KAAKC,IAAL,CAAUC,KAA1B,CADkC,EAElCc,aAAA,CAAgBhB,KAAK+B,aAAL,CAAmB9B,IAAnB,CAAwBC,KAAxC,CAFkC,EAGlCqC,iBAAiBvC,KAAKwC,YAAtB,EAAoCY,iBAApC,EAAuDtB,UAAvD,EAAmEf,SAAnE,CAHkC,CAApC;;YAMQZ,IAAR,CAAaa,mBAAA,CACXA,oBAAA,CACE,GADF,EAEEA,gBAAA,CAAmBc,UAAnB,EAA+Bd,UAAA,CAAahB,KAAKC,IAAL,CAAUC,KAAvB,CAA/B,CAFF,EAGEc,cAAA,CACEA,gBAAA,CAAmBkC,WAAnB,EAAgClC,UAAA,CAAa,gBAAb,CAAhC,CADF,EAEEqC,2BAFF,CAHF,CADW,CAAb;GARF;;;ACDF,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;UAC3BA,YAAY/C,IAApB;SACO,aAAL;aACU,GAAE8C,eAAeC,YAAYC,IAA3B,CAAiC,GAA3C;SACG,UAAL;aACU,IAAGF,eAAeC,YAAYC,IAA3B,CAAiC,GAA5C;;aAEOD,YAAYtD,IAAZ,CAAiBC,KAAxB;;;;AAIN,SAASuD,qBAAT,CAA+BF,WAA/B,EAA4CxC,SAA5C,EAAuD;QAC/C2C,2BAA2B,CAC/B1C,aAAA,CAAgBuC,YAAYI,QAAZ,CAAqB1D,IAArB,CAA0BC,KAA1C,CAD+B,EAE/Bc,aAAA,CAAgBsC,eAAeC,YAAYC,IAA3B,CAAhB,CAF+B,CAAjC;;MAKID,YAAYK,YAAhB,EAA8B;6BACHzD,IAAzB,CAA8BU,aAAa0C,YAAYK,YAAzB,EAAuC7C,SAAvC,CAA9B;;;SAGKC,cAAA,CACLA,gBAAA,CACED,SADF,EAEEC,UAAA,CAAa,UAAb,CAFF,CADK,EAKL0C,wBALK,CAAP;;;AASF,AAAe,SAASG,wBAAT,CAAkCxD,WAAlC,EAA+CU,SAA/C,EAA0D;SAChEC,eAAA,CAAkBX,YAAYe,GAAZ,CAAiBb,UAAD,IAAgBkD,sBAAsBlD,UAAtB,EAAkCQ,SAAlC,CAAhC,CAAlB,CAAP;;;AC9BF,SAAS+C,SAAT,CAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;MACnCD,YAAY9D,IAAhB,EAAsB;YACZE,IAAR,CAAaa,aAAA,CAAgB+C,YAAY9D,IAAZ,CAAiBC,KAAjC,CAAb;;;;AAIJ,SAAS+D,cAAT,CAAwBF,WAAxB,EAAqCC,OAArC,EAA8CjD,SAA9C,EAAyD;QACjDV,cAAc0D,YAAYG,mBAAhC;;MAEI,EAAE7D,eAAeA,YAAYgC,MAA7B,CAAJ,EAA0C;;;;UAIlClC,IAAR,CAAagE,yBAAc9D,WAAd,EAA2BU,SAA3B,CAAb;;;AAGF,SAASqD,wBAAT,CAAkCL,WAAlC,EAA+C;UACrCA,YAAYM,SAApB;SACO,OAAL;aACS,UAAP;SACG,UAAL;aACS,aAAP;;YAEM,IAAIvE,KAAJ,CAAW,eAAciE,YAAYM,SAAU,8BAA/C,CAAN;;;;AAIN,AAAe,SAASC,gBAAT,CAA0BrB,OAA1B,EAAmClC,SAAnC,EAA8CmC,WAA9C,EAA2DpB,UAA3D,EAAuE;SAC7E,SAASqB,OAAT,CAAiBnD,IAAjB,EAAuB;UACtBoD,oBAAoB,MAA1B;UACMmB,0BAA0B,EAAhC;;cAEUvE,IAAV,EAAgBuE,uBAAhB;mBACevE,IAAf,EAAqBuE,uBAArB,EAA8CxD,SAA9C;;4BAEwBZ,IAAxB,CACEoC,iBAAiBvC,KAAKwC,YAAtB,EAAoCY,iBAApC,EAAuDtB,UAAvD,EAAmEf,SAAnE,CADF;;YAIQZ,IAAR,CAAaa,mBAAA,CAAsBA,cAAA,CACjCA,gBAAA,CAAmBkC,WAAnB,EAAgClC,UAAA,CAAaoD,yBAAyBpE,IAAzB,CAAb,CAAhC,CADiC,EAEjCuE,uBAFiC,CAAtB,CAAb;GAXF;;;AC1BF,SAASC,yBAAT,CAAmCnE,WAAnC,EAAgD;SACvCA,YAAYC,MAAZ,CAAoBC,UAAD,IAAgBA,WAAWC,IAAX,KAAoB,oBAAvD,CAAP;;;AAGF,SAASiE,eAAT,CAAyBC,KAAzB,EAAgCC,aAAhC,EAA4C;QACpCxE,IAAN,CAAWa,mBAAA,CAAsB,OAAtB,EAA+B,CACxCA,kBAAA,CAAqB2D,aAArB,EAAiC3D,gBAAA,CAAmB,EAAnB,CAAjC,CADwC,CAA/B,CAAX;;;AAKF,SAAS4D,eAAT,CAAyBF,KAAzB,EAAgC3D,SAAhC,EAA2CmC,WAA3C,EAAwD;QAChD/C,IAAN,CAAWa,mBAAA,CAAsB,OAAtB,EAA+B,CACxCA,kBAAA,CAAqBkC,WAArB,EACElC,cAAA,CACEA,gBAAA,CAAmBD,SAAnB,EAA8BC,UAAA,CAAa,UAAb,CAA9B,CADF,EAEE,EAFF,CADF,CADwC,CAA/B,CAAX;;;AAUF,AAAe,SAAS6D,eAAT,CAAyBC,UAAzB,EAAqC/D,SAArC,EAAgDmC,WAAhD,EAA6DpB,UAA7D,EAAyE;QAChFiD,iBAAiB,EAAvB;;kBAEgBA,cAAhB,EAAgChE,SAAhC,EAA2CmC,WAA3C;;QAEM8B,mBAAmBC,OAAOC,MAAP,CACvB,EADuB,EAEvBJ,UAFuB,EAGvB,EAACzE,aAAaD,gBAAgB0E,WAAWzE,WAA3B,CAAd,EAHuB,CAAzB;QAKM8E,qBAAqBX,0BAA0BQ,iBAAiB3E,WAA3C,CAA3B;;MAEI8E,mBAAmB9C,MAAvB,EAA+B;oBACb0C,cAAhB,EAAgCjD,UAAhC;;;QAGIkD,gBAAN,EAAwB;wBACFhC,gBAAgB+B,cAAhB,EAAgChE,SAAhC,EAA2CmC,WAA3C,EAAwDpB,UAAxD,CADE;yBAEDwC,iBAAiBS,cAAjB,EAAiChE,SAAjC,EAA4CmC,WAA5C,EAAyDpB,UAAzD;GAFvB;;SAKOiD,cAAP;;;AC3CK,SAASK,cAAT,CAAwBC,WAAxB,EAAqCtE,YAAY,QAAjD,EAA2DmC,cAAc,UAAzE,EAAqFpB,aAAa,SAAlG,EAA6G;QAC5GgD,aAAaQ,MAAMD,WAAN,CAAnB;;SAEOR,gBAAgBC,UAAhB,EAA4B9D,UAAA,CAAaD,SAAb,CAA5B,EAAqDC,UAAA,CAAakC,WAAb,CAArD,EAAgFlC,UAAA,CAAac,UAAb,CAAhF,CAAP;;;AAGF,AAAe,SAASyD,eAAT,CAAyBF,WAAzB,EAAsCtE,YAAY,QAAlD,EAA4DmC,cAAc,UAA1E,EAAsFpB,aAAa,SAAnG,EAA8G;QACrH0D,QAAQJ,eAAeC,WAAf,EAA4BtE,SAA5B,EAAuCmC,WAAvC,EAAoDpB,UAApD,CAAd;;SAEQ,GAAE2D,SAASzE,OAAA,CAAUwE,KAAV,CAAT,EAA2BE,IAAK,IAA1C;;;;;"}